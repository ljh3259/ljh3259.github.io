# 5장  책임 할당하기

- 데이터 중심 설계로 인해 발생하는 줌제점을 해결할 수 있는 가장 기본적인 방법?
	- 책임에 초첨을 맞추는 것이다.
- **그렇다면 어떤 객체에게 어떤 책임을 할당해야 할까?**
- 책임 할당 과정은 일종의 트레이드 오프 활동이다.
- GRASP 패턴?


# 01. 책임 주도 설계를 향해
- 데이터 중심 -> 책임 중심 설계로 전환하기 위한 두가지 원칙
	1. 데이터보다 행동을 먼저 결정하라.
	2. 협력이라는 문맥 안에서 책임을 결정하라.

## 첫번째 원칙 : 데이터보다 행동을 먼저 결정하라.
- 책임 중심 설계
	- 이 객체가 수행해야 하는 책임은 무엇인가? 를 결정한 후에 책임을 수행하는 데 필요한 데이터는 무엇인가를 결정한다.
	- 즉 책임을 먼저 결정한 후에 객체의 상태를 결정한다는 것이다.
- 해결의 실마리 ?
	- **협력** 에서 찾을 수 있다.
	- 그럼 협력을 알면 책임을 결정할수 있다는 거겠지?
	- **(2번째 원칙이 협력이라는 문맥안에서 책임을 결정하라 이다.)**

## 두번째 원칙 : 협력이라는 문맥 안에서 책임을 결정하라.
	- 협력을 시작하는 주체는 메시지 전송자이기 때문에 협력에 적합한 책임이란? 메시지 수신자가 아니라 **메시지 전송자** 에게 적합한 책임을 의미한다.
		- 생각하지 못했다.
	- 협력에 적합한 책임을 수확하기 위해서는 메시지를 결정한 후에 객체를 선택해야한다.
	- 객체가 메시지를 선택하는 것이 아니라 메시지가 객체를 선택하게 해야 한다.
	- 객체에 책임을 할당하기전에 메시지를 먼저 결정하라.
	- 이렇게 질문(접근)하자
		- 메시지를 전송해야 하는데 누구에게 전송해야 하지?

# 02. 책임 할당을 위한 GRASP 패턴
### GRASP 패턴이 뭔데?
	- 책임 할당 기법
	- General Responsibility Assignment Software Pattern
	- 일반적인 책임 할당을 위한 소프트웨어 패턴
	- 책임을 할당할 때 지침으로 삼을 수 있는 원칙들의 집합을 패턴 형식으로 정리한 것.

## 도메인 개념에서 출발하기
- 설계를 시작하기 전에 도메인에 대한 개략적인 모습을 그려 보는 것이 유용하다.
- 설계를 시작하는 단계에서는 **개념들의 의미와 관계가 정확하거나 완벽할 필요가 없다.** 
	- 설계를 진행해나가면서 다져가는건가?
	- 설계를 시작하기 위해 참고할 수 있는 개념들의 모음 정도로 간주하라.
	- P137 5.1 그림 참고
###  중요한 것은 설계를 시작하는 것이지 도메인 개념들을 완벽하게 정리하라는 것이 아니다.
	- 위 말이 중요한거같다 설계 시작단계의 목적은 설계를 시작하는 것이다. 
		- 난 가끔 정작 중요한 맥락을 벗어나는 경우가 있다. 이점 주의하자.
- 올바른 도메인 모델이란 존재하지 않는다.
	- 두 도메인 모델 모두 올바른 구현을 이끌어낼 수만 있다면 정답은 ‘둘 다’ 다.
- 필요한 것은 도메인을 그대로 투영한 모델이 아니라 **구현에 도움이 되는 모델**이다.

## 정보 전문가에게 책임을 할당하라.


